// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: matchups.sql

package db

import (
	"context"
	"database/sql"
)

const getMatchupsByLeagueId = `-- name: GetMatchupsByLeagueId :many


SELECT
    m.id, m.week, m.home_team_id, m.away_team_id, m."homeScore", m."awayScore", m."isPlayoff", m."matchupType",
    COALESCE("ht"."teamName", '') as "homeTeamName",
    COALESCE("ht"."owners", '') as "homeTeamOwners",
    COALESCE("at"."teamName", '') as "awayTeamName",
    COALESCE("at"."owners", '') as "awayTeamOwners",
    "l"."year" as "leagueYear",
    "l"."id" as "leagueId"
FROM "matchups" "m"
LEFT JOIN "teams" "ht" ON "m"."home_team_id" = "ht"."id"
LEFT JOIN "teams" "at" ON "m"."away_team_id" = "at"."id"
JOIN "leagues" "l" ON "l"."id" = $1
WHERE ("ht"."league_id" = $1 OR "m"."home_team_id" IS NULL)
AND ("at"."league_id" = $1 OR "m"."away_team_id" IS NULL)
ORDER BY "m"."week" ASC
`

type GetMatchupsByLeagueIdRow struct {
	ID             int32         `json:"id"`
	Week           int32         `json:"week"`
	HomeTeamID     sql.NullInt32 `json:"home_team_id"`
	AwayTeamID     sql.NullInt32 `json:"away_team_id"`
	HomeScore      float64       `json:"homeScore"`
	AwayScore      float64       `json:"awayScore"`
	IsPlayoff      bool          `json:"isPlayoff"`
	MatchupType    string        `json:"matchupType"`
	HomeTeamName   string        `json:"homeTeamName"`
	HomeTeamOwners string        `json:"homeTeamOwners"`
	AwayTeamName   string        `json:"awayTeamName"`
	AwayTeamOwners string        `json:"awayTeamOwners"`
	LeagueYear     int32         `json:"leagueYear"`
	LeagueId       int32         `json:"leagueId"`
}

// -- name: GetMatchupsByLeagueId :many
// SELECT
//
//	"m".*,
//	"ht"."teamName" as "homeTeamName",
//	"ht"."owners" as "homeTeamOwners",
//	"at"."teamName" as "awayTeamName",
//	"at"."owners" as "awayTeamOwners",
//	"l"."year" as "leagueYear",
//	"l"."id" as "leagueId"
//
// FROM "matchups" "m"
// JOIN "teams" "ht" ON "m"."home_team_id" = "ht"."id"
// JOIN "teams" "at" ON "m"."away_team_id" = "at"."id"
// JOIN "leagues" "l" ON "ht"."league_id" = "l"."id"
// WHERE "ht"."league_id" = $1
// AND "at"."league_id" = $1
// ORDER BY "m"."week" ASC;
// -- name: GetMatchupsByLeagueId :many
// SELECT
//
//	"m".*,
//	"ht"."teamName" as "homeTeamName",
//	"ht"."owners" as "homeTeamOwners",
//	"at"."teamName" as "awayTeamName",
//	"at"."owners" as "awayTeamOwners",
//	"l"."year" as "leagueYear",
//	"l"."id" as "leagueId"
//
// FROM "matchups" "m"
// LEFT JOIN "teams" "ht" ON "m"."home_team_id" = "ht"."id"
// LEFT JOIN "teams" "at" ON "m"."away_team_id" = "at"."id"
// LEFT JOIN "leagues" "l" ON COALESCE("ht"."league_id", "at"."league_id") = "l"."id"
// WHERE ("ht"."league_id" = $1 OR "ht"."league_id" IS NULL)
// AND ("at"."league_id" = $1 OR "at"."league_id" IS NULL)
// AND "l"."id" = $1
// ORDER BY "m"."week" ASC;
func (q *Queries) GetMatchupsByLeagueId(ctx context.Context, id int32) ([]GetMatchupsByLeagueIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getMatchupsByLeagueId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMatchupsByLeagueIdRow
	for rows.Next() {
		var i GetMatchupsByLeagueIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Week,
			&i.HomeTeamID,
			&i.AwayTeamID,
			&i.HomeScore,
			&i.AwayScore,
			&i.IsPlayoff,
			&i.MatchupType,
			&i.HomeTeamName,
			&i.HomeTeamOwners,
			&i.AwayTeamName,
			&i.AwayTeamOwners,
			&i.LeagueYear,
			&i.LeagueId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
