// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leagues.sql

package db

import (
	"context"
)

const getLeagueById = `-- name: GetLeagueById :one
SELECT "id", "leagueId", "year", "teamCount", "currentWeek", "nflWeek" 
FROM "leagues" 
WHERE "id" = $1
`

func (q *Queries) GetLeagueById(ctx context.Context, id int32) (League, error) {
	row := q.db.QueryRowContext(ctx, getLeagueById, id)
	var i League
	err := row.Scan(
		&i.ID,
		&i.LeagueId,
		&i.Year,
		&i.TeamCount,
		&i.CurrentWeek,
		&i.NflWeek,
	)
	return i, err
}

const getLeagues = `-- name: GetLeagues :many
SELECT "id", "leagueId", "year", "teamCount", "currentWeek", "nflWeek" 
FROM "leagues"
`

func (q *Queries) GetLeagues(ctx context.Context) ([]League, error) {
	rows, err := q.db.QueryContext(ctx, getLeagues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []League
	for rows.Next() {
		var i League
		if err := rows.Scan(
			&i.ID,
			&i.LeagueId,
			&i.Year,
			&i.TeamCount,
			&i.CurrentWeek,
			&i.NflWeek,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
