// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leagues.sql

package db

import (
	"context"
	"database/sql"
)

const getLeagueById = `-- name: GetLeagueById :one
SELECT "id", "leagueId", "year", "teamCount", "currentWeek", "nflWeek" 
FROM "leagues" 
WHERE "id" = $1
`

func (q *Queries) GetLeagueById(ctx context.Context, id int32) (League, error) {
	row := q.db.QueryRowContext(ctx, getLeagueById, id)
	var i League
	err := row.Scan(
		&i.ID,
		&i.LeagueId,
		&i.Year,
		&i.TeamCount,
		&i.CurrentWeek,
		&i.NflWeek,
	)
	return i, err
}

const getLeagues = `-- name: GetLeagues :many
SELECT
    "id",
    "leagueId",
    "year",
    "teamCount",
    "currentWeek",
    "nflWeek"
FROM
    "leagues"
WHERE
    ("id" = COALESCE($1, "id") OR $1 IS NULL)
    AND ("leagueId" = COALESCE($2, "leagueId") OR $2 IS NULL)
    AND ("year" = COALESCE($3, "year") OR $3 IS NULL)
    AND ("teamCount" = COALESCE($4, "teamCount") OR $4 IS NULL)
    AND ("currentWeek" = COALESCE($5, "currentWeek") OR $5 IS NULL)
    AND ("nflWeek" = COALESCE($6, "nflWeek") OR $6 IS NULL)
ORDER BY
    CASE 
        WHEN $7 = 'id' THEN "id"
        WHEN $7 = 'year' THEN "year"
        WHEN $7 = 'teamCount' THEN "teamCount"
        WHEN $7 = 'currentWeek' THEN "currentWeek"
        WHEN $7 = 'nflWeek' THEN "nflWeek"
        ELSE "id"
    END,
    CASE
        WHEN $7 LIKE '-%' THEN 'DESC'
        ELSE 'ASC'
    END
LIMIT $8
OFFSET $9
`

type GetLeaguesParams struct {
	ID          int32         `json:"id"`
	LeagueId    int32         `json:"leagueId"`
	Year        int32         `json:"year"`
	TeamCount   sql.NullInt32 `json:"teamCount"`
	CurrentWeek sql.NullInt32 `json:"currentWeek"`
	NflWeek     sql.NullInt32 `json:"nflWeek"`
	Column7     interface{}   `json:"column_7"`
	Limit       int32         `json:"limit"`
	Offset      int32         `json:"offset"`
}

func (q *Queries) GetLeagues(ctx context.Context, arg GetLeaguesParams) ([]League, error) {
	rows, err := q.db.QueryContext(ctx, getLeagues,
		arg.ID,
		arg.LeagueId,
		arg.Year,
		arg.TeamCount,
		arg.CurrentWeek,
		arg.NflWeek,
		arg.Column7,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []League
	for rows.Next() {
		var i League
		if err := rows.Scan(
			&i.ID,
			&i.LeagueId,
			&i.Year,
			&i.TeamCount,
			&i.CurrentWeek,
			&i.NflWeek,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
