// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: drafts.sql

package db

import (
	"context"
)

const getDraftBoardWithSummary = `-- name: GetDraftBoardWithSummary :many
SELECT
    d."id" AS "draft_id",
    d."team_id",
    t."teamName" AS "team_name",
    d."player_id",
    p."name" AS "player_name",
    d."overallPick",
    d."roundNum",
    d."roundPick",
    l."year",
    l."teamCount"
FROM "drafts" d
JOIN "players" p ON d."player_id" = p."id"
JOIN "teams" t ON d."team_id" = t."id"
JOIN "leagues" l ON t."league_id" = l."id"
WHERE t."league_id" = $1
ORDER BY d."overallPick"
`

type GetDraftBoardWithSummaryRow struct {
	DraftID     int32  `json:"draft_id"`
	TeamID      int32  `json:"team_id"`
	TeamName    string `json:"team_name"`
	PlayerID    int32  `json:"player_id"`
	PlayerName  string `json:"player_name"`
	OverallPick int32  `json:"overallPick"`
	RoundNum    int32  `json:"roundNum"`
	RoundPick   int32  `json:"roundPick"`
	Year        int32  `json:"year"`
	TeamCount   int32  `json:"teamCount"`
}

func (q *Queries) GetDraftBoardWithSummary(ctx context.Context, leagueID int32) ([]GetDraftBoardWithSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, getDraftBoardWithSummary, leagueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDraftBoardWithSummaryRow
	for rows.Next() {
		var i GetDraftBoardWithSummaryRow
		if err := rows.Scan(
			&i.DraftID,
			&i.TeamID,
			&i.TeamName,
			&i.PlayerID,
			&i.PlayerName,
			&i.OverallPick,
			&i.RoundNum,
			&i.RoundPick,
			&i.Year,
			&i.TeamCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDraftsByLeagueYear = `-- name: GetDraftsByLeagueYear :many
SELECT 
    "d"."id", 
    "d"."team_id", 
    "d"."player_id", 
    "d"."overallPick", 
    "d"."roundNum", 
    "d"."roundPick", 
    "d"."keeperStatus", 
    "d"."bidAmount", 
    "d"."nominating_team_id"
FROM "drafts" "d"
JOIN "teams" "t" ON "d"."team_id" = "t"."id"
WHERE "t"."league_id" = $1
`

func (q *Queries) GetDraftsByLeagueYear(ctx context.Context, leagueID int32) ([]Draft, error) {
	rows, err := q.db.QueryContext(ctx, getDraftsByLeagueYear, leagueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Draft
	for rows.Next() {
		var i Draft
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.PlayerID,
			&i.OverallPick,
			&i.RoundNum,
			&i.RoundPick,
			&i.KeeperStatus,
			&i.BidAmount,
			&i.NominatingTeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
